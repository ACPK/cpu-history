CPU Mon:
before 1.0 release:
- tidy up release notes, remove localizations if they're not accurate. @done
- before shipping: build a full deployment vers, and move prefs file beforehand: any last bugs/missing things
- write up app, release on blog and cbowns.com
future:
- bugs:
- 1. app blows away graph
	- happens until the CPU data buffer has been fully filled, and you hold down "restore defaults" through TWO timer firings, then it's fixed.
	- diff CPU source against memory monitor:
		- any changes with data source being reset? shouldn't be…
	- what about removing the notifications in favor of straight method callbacks? first, what's the underlying problem: don't solve what doesn't need solving
- 2. cmd-w doesn't close prefs window
- future upgrades:
	- CPU usage across processors:
		- get # of processors with http://www.cocoadev.com/index.pl?NSProcessInfo
		- add another graph
Mem -> CPU conversion key:
- wired = user
- active = sys
- inactive = nice
- free = idle
Archive:
- get it to build @done @project(CPU Mon)
- make another pass through the source to take out extraneous references to CPUUsage @done @project(CPU Mon)
- check TODOs @done @project(CPU Mon)
- how to do data update: make a large float array with my usage data in it, use a rolling pointer to update things. store new data from current cpu stats. @done @project(CPU Mon)
	- is that how the current and last stuff is built? @done @project(CPU Mon)
- in other words, I need to pass the pointer by reference so I can modify its value (ie the memory it points to). keep in mind, someone has to clean up after the old memory. @done @project(CPU Mon)
- memory leak: vm_deallocate the processorInfo array after use: @done @project(CPU Mon)
- methods needed: @done @project(CPU Mon)
	- updateCPUStat: what do we want to accomplish here? @done @project(CPU Mon)
		- get current data @done @project(CPU Mon)
		- retrieve data at last refresh @done @project(CPU Mon)
		- subtract last from current @done @project(CPU Mon)
	- init: init the processor usage data: set the first "lastProcessorInfo" array so update is all good to go. @done @project(CPU Mon)
	- getCurrentData @done @project(CPU Mon)
		- return last data @done @project(CPU Mon)
	- getNext: @done @project(CPU Mon)
		- run update @done @project(CPU Mon)
		- set ptr new data @done @project(CPU Mon)
		- update internal ptrs @done @project(CPU Mon)
	- getPrev @done @project(CPU Mon)
		- return one before last? @done @project(CPU Mon)
- variables needed: @done @project(CPU Mon)
	- CPUData array @done @project(CPU Mon)
	- lastProcessorInfo (for diffs) @done @project(CPU Mon)
	- numLastProcessorInfo (to deallocate it) @done @project(CPU Mon)
	- two variables to track size, location in array @done @project(CPU Mon)
- notes: need TWO refreshes at init to get current info! @done @project(CPU Mon)
 		if(lastProcessorInfo) {
			size_t lastProcessorInfoSize = sizeof(integer_t) * numLastProcessorInfo;
			vm_deallocate(target_task, (vm_address_t)lastProcessorInfo, lastProcessorInfoSize);
		}

		lastProcessorInfo = processorInfo;
		numLastProcessorInfo = numProcessorInfo;
	- first test data coming out of cpu info with logs (this might hurt. limit to one sample every 2 sec) @done @project(CPU Mon)
	- test with xcode debugger to watch array data change. @done @project(CPU Mon)
	- paging rate graph @done @project(CPU Mon)
- switch the source of the graph from memory info to CPU info: @done @project(CPU Mon)
	- then change graphing fct to pull from different data source @done @project(CPU Mon)
	- text overlay @done @project(CPU Mon)
- change app name to CPU History @done @project(CPU Mon)
- reorder bars: sys, nice, user, idle @done @project(before any polish)
- test prefs: change in Memory Monitor, see if app picks them up @done @project(before any polish)
- properly set Dock icon @done @project(before dinner)
- fix Dock menu display @done @project(before dinner)
- if we can't make CPUInfo object, exit app gracefully @done @project(before dinner)
	- finish commenting out variables and outlets @done @project(before 1.0 release)
		- prefs.h @done @project(before 1.0 release)
		- prefs.m @done @project(before 1.0 release)
	- what is this transparency vestigal crap? @done @project(before 1.0 release)
	- relink nib to new variables @done @project(before 1.0 release)
	- initialize colors to different values than MemMonitor defaults @done @project(before 1.0 release)
	- delete prefs file and start over: any errors reading new values? @done @project(before 1.0 release)
	- try building it… @done @project(before 1.0 release)
- get rid of extraneous properties, and relink stuff in IB @done @project(before 1.0 release)
- make a color change backwards applicable: somehow redraw entire graph after prefs color change @done @project(before 1.0 release)
	- call updateGraph after prefs change @done @project(before 1.0 release)
- prefs: add an option for bar width: from 1 to 20 px per bar @done @project(before 1.0 release)
	- preferred: 4-6 @done @project(before 1.0 release)
